[tool.poetry]
name = "electricitymap-contrib"
version = "1.0.0"
description = ""
license = "AGPL-3.0-or-later"
authors = ["Electricity Maps <app@electricitymaps.com>"]
packages = [{ include = "electricitymap" }]
include = ["config/*.json", "config/*.yaml"]

[tool.poetry.dependencies]
python = '>= 3.10, < 3.11'
pydantic = "^1.9.0"
beautifulsoup4 = { version = "~4.6.0", optional = true }
demjson3 = { version = "^3.0.5", optional = true }
freezegun = { version = "^0.3.15", optional = true }
imageio = { version = "^2.18.0", optional = true }
lxml = { version = "^4.9.1", optional = true }
opencv-python = { version = "4.8.1.78", optional = true }
pandas = { version = "^1.4.4", optional = true }
pytesseract = { version = "0.2.0", optional = true }
requests = { version = "~2.32.2", optional = true }
signalr-client-threads = { version = "~0.0.12", optional = true }
xlrd = { version = "^2.0.1", optional = true }
xmltodict = { version = "^0.13.0", optional = true }
PyYAML = "^6.0"
openpyxl = { version = "^3.1.2", optional = true }
pydataxm = { version = "^0.3.2", optional = true }
ruamel-yaml = "^0.17.24"
pycountry = { version = "^22.3.5", optional = true }
ruff = "0.4.3"
tzdata = "^2025.1"
numpy = "^1.24.4"
odfpy = { version = "^1.4.1", optional = true }

[tool.poetry.scripts]
test-parser = 'test_parser:test_parser'
test_parser = 'test_parser:test_parser'
capacity_update = 'capacity_update:capacity_update'
check = 'scripts.tooling:check'
format = 'scripts.tooling:format'
lint = 'scripts.tooling:lint'
test = 'scripts.tooling:test'


[tool.poetry.extras]
parsers = [
    "beautifulsoup4",
    "demjson3",
    "eiapy",
    "imageio",
    "lxml",
    "pandas",
    "pytesseract",
    "requests",
    "opencv-python",
    "xlrd",
    "freezegun",
    "signalr-client-threads",
    "openpyxl",
    "pydataxm",
    "pycountry",
    "odfpy",
]

scripts = ["xmltodict"]

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
syrupy = "^4.8.0"
requests-mock = "~1.3.0"
testfixtures = "^7.0.0"
click = "^8.0.0"


[tool.pytest.ini_options]
testpaths = ["tests", "parsers/test", "electricitymap/contrib/lib/tests"]
addopts = "--color=yes --durations=10"


[build-system]
requires = ["poetry-core>=2.0.0,<3"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "parsers/archived",
]

# Same as Black.
line-length = 88
indent-width = 4

target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E4",
    "E7",
    "E9",
    "E999",
    "F",
    "UP",
    "I",
    "DTZ003",
    "DTZ004",
    "B",
    "A",
    "C4",
    "SIM"
]
ignore = [
    "B008", # This flags every parser we have, let's ignore it for now
    "B017", # TODO: Fix this
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
